/*
 * Autopsy Forensic Browser
 *
 * Copyright 2023 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.basistech.df.cybertriage.autopsy.malwarescan;

import com.basistech.df.cybertriage.autopsy.ctapi.CTApiDAO;
import com.basistech.df.cybertriage.autopsy.ctapi.CTCloudException;
import com.basistech.df.cybertriage.autopsy.ctapi.json.AuthTokenResponse;
import com.basistech.df.cybertriage.autopsy.ctapi.json.AuthenticatedRequestData;
import com.basistech.df.cybertriage.autopsy.ctapi.json.CTCloudBean;
import com.basistech.df.cybertriage.autopsy.ctapi.json.DecryptedLicenseResponse;
import com.basistech.df.cybertriage.autopsy.ctapi.json.MetadataUploadRequest;
import org.apache.commons.lang3.StringUtils;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.datamodel.ReadContentInputStream;
import org.sleuthkit.datamodel.SleuthkitCase;
import org.sleuthkit.datamodel.TskCoreException;

/**
 * Handles uploading of files that are unknown.
 */
public class FileUpload {

    private final CTApiDAO ctApiDAO = CTApiDAO.getInstance();

    private boolean isUnknown(CTCloudBean cloudBean) {

    }

    private boolean isUploadable(AbstractFile af) {

    }

    public boolean tryUpload(SleuthkitCase skCase, CTCloudBean cloudBean, long objId) {

    }

    private boolean upload(DecryptedLicenseResponse decrypted, AbstractFile af) throws CTCloudException, TskCoreException {
        // get auth token / file upload url
        AuthTokenResponse authTokenResponse = ctApiDAO.getAuthToken(decrypted, true);
        if (StringUtils.isBlank(authTokenResponse.getFileUploadUrl())) {
            throw new CTCloudException(CTCloudException.ErrorCode.NETWORK_ERROR);
        }

        // upload bytes
        ReadContentInputStream fileInputStream = new ReadContentInputStream(af);
        ctApiDAO.uploadFile(authTokenResponse.getFileUploadUrl(), af.getName(), fileInputStream);

        // upload metadata
        MetadataUploadRequest metaRequest = new MetadataUploadRequest()
                .setCreatedDate(af.getCrtime())
                .setFilePath(af.getUniquePath())
                .setFileSizeBytes(af.getSize())
                .setFileUploadUrl(authTokenResponse.getFileUploadUrl())
                .setMd5(af.getMd5Hash())
                .setSha1(af.getSha1Hash())
                .setSha256(af.getSha256Hash());

        ctApiDAO.uploadMeta(new AuthenticatedRequestData(decrypted, authTokenResponse), metaRequest);
        return true;
    }

}
