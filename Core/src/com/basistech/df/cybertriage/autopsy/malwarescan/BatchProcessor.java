/*
 * Autopsy Forensic Browser
 *
 * Copyright 2023 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.basistech.df.cybertriage.autopsy.malwarescan;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;

/**
 * Processes a batch when number of items reaches batchSize or flush. Processing
 * blocks (and subsequently add and flush operations) until previous batch
 * finishes.
 */
public class BatchProcessor<T> {

    private final ExecutorService processingExecutorService = Executors.newSingleThreadExecutor();

    private final BlockingQueue<T> batchingQueue;
    private final List<T> processingQueue;
    private final int batchSize;
    private final Consumer<List<T>> itemsConsumer;
    private final long millisTimeout;

    private Future<?> lastProcessingFuture = CompletableFuture.runAsync(() -> {
    });

    public BatchProcessor(int batchSize, long millisTimeout, Consumer<List<T>> itemsConsumer) {
        this.batchingQueue = new LinkedBlockingQueue<>(batchSize);
        this.processingQueue = new ArrayList<>(batchSize);
        this.batchSize = batchSize;
        this.itemsConsumer = itemsConsumer;
        this.millisTimeout = millisTimeout;
    }

    public synchronized void clearCurrentBatch() {
        batchingQueue.clear();
    }

    public synchronized void add(T item) throws InterruptedException {
        batchingQueue.add(item);
        if (batchingQueue.size() >= batchSize) {
            asyncProcessBatch();
        }
    }

    public synchronized void flush(boolean blockUntilFinished) throws InterruptedException {
        asyncProcessBatch();
        if (blockUntilFinished) {
            waitCurrentFuture();
        }
    }

    private synchronized void waitCurrentFuture() throws InterruptedException {
        synchronized (lastProcessingFuture) {
            if (!lastProcessingFuture.isDone()) {
                try {
                    lastProcessingFuture.get(millisTimeout, TimeUnit.MILLISECONDS);
                } catch (ExecutionException | TimeoutException ex) {
                    // ignore timeout
                }
            }
        }
    }

    private synchronized void asyncProcessBatch() throws InterruptedException {
        if (!batchingQueue.isEmpty()) {
            // wait for previous processing to finish
            waitCurrentFuture();

            // if 'andThen' doesn't run, clear the processing queue
            processingQueue.clear();

            // transfer batching queue to processing queue
            batchingQueue.drainTo(processingQueue);

            // submit to processor and then clear processing queue
            lastProcessingFuture = processingExecutorService.submit(
                    () -> itemsConsumer.andThen(processingQueue -> processingQueue.clear()).accept(processingQueue)
            );
        }
    }

}
